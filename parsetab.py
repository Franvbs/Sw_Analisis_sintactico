
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDErightUMINUSDIVIDE ELSE EQ GT ID IF LPAREN LT MINUS NEQ NUMBER PLUS RPAREN TIMES WHILEstatement : expressionexpression : expression PLUS expression\n| expression MINUS expression\n| expression TIMES expression\n| expression DIVIDE expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : MINUS expression %prec UMINUSexpression : IDstatement : IF expression statement ELSE statementstatement : WHILE expression statement'
    
_lr_action_items = {'IF':([0,7,8,13,14,15,17,18,19,20,24,25,26,],[3,-7,-9,3,3,-8,-2,-3,-4,-5,-6,3,-3,]),'WHILE':([0,7,8,13,14,15,17,18,19,20,24,25,26,],[4,-7,-9,4,4,-8,-2,-3,-4,-5,-6,4,-3,]),'LPAREN':([0,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19,20,22,24,25,26,],[6,6,6,6,6,-7,-9,6,6,6,6,6,6,-8,-2,-3,-4,-5,6,-6,6,-3,]),'NUMBER':([0,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19,20,22,24,25,26,],[7,7,7,7,7,-7,-9,7,7,7,7,7,7,-8,-2,-3,-4,-5,7,-6,7,-3,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,24,25,26,],[5,10,5,5,5,5,-7,-9,5,5,5,5,22,22,-8,10,-2,-3,-4,-5,5,-6,5,-3,]),'ID':([0,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19,20,22,24,25,26,],[8,8,8,8,8,-7,-9,8,8,8,8,8,8,-8,-2,-3,-4,-5,8,-6,8,-3,]),'$end':([1,2,7,8,15,17,18,19,20,23,24,26,27,],[0,-1,-7,-9,-8,-2,-3,-4,-5,-11,-6,-8,-10,]),'ELSE':([2,7,8,15,17,18,19,20,21,23,24,26,27,],[-1,-7,-9,-8,-2,-3,-4,-5,25,-11,-6,-8,-10,]),'PLUS':([2,7,8,13,14,15,16,17,18,19,20,24,26,],[9,-7,-9,9,9,-8,9,-2,-3,-4,-5,-6,-3,]),'TIMES':([2,7,8,13,14,15,16,17,18,19,20,24,26,],[11,-7,-9,11,11,-8,11,11,11,-4,-5,-6,11,]),'DIVIDE':([2,7,8,13,14,15,16,17,18,19,20,24,26,],[12,-7,-9,12,12,-8,12,12,12,-4,-5,-6,12,]),'RPAREN':([7,8,15,16,17,18,19,20,24,],[-7,-9,-8,24,-2,-3,-4,-5,-6,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,13,14,25,],[1,21,23,27,]),'expression':([0,3,4,5,6,9,10,11,12,13,14,22,25,],[2,13,14,15,16,17,18,19,20,2,2,26,2,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> expression','statement',1,'p_statement_expr','sw_analisis_sintactico.py',77),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','sw_analisis_sintactico.py',81),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','sw_analisis_sintactico.py',82),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','sw_analisis_sintactico.py',83),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','sw_analisis_sintactico.py',84),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','sw_analisis_sintactico.py',91),
  ('expression -> NUMBER','expression',1,'p_expression_number','sw_analisis_sintactico.py',95),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','sw_analisis_sintactico.py',99),
  ('expression -> ID','expression',1,'p_expression_id','sw_analisis_sintactico.py',103),
  ('statement -> IF expression statement ELSE statement','statement',5,'p_statement_if_else','sw_analisis_sintactico.py',108),
  ('statement -> WHILE expression statement','statement',3,'p_statement_while','sw_analisis_sintactico.py',116),
]
